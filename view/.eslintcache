[{"/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/index.js":"1","/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/components/Header.jsx":"2","/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/components/ModalForm.jsx":"3","/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/components/Content.jsx":"4","/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/utils.js":"5","/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/reportWebVitals.js":"6","/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/App.js":"7"},{"size":500,"mtime":1611728563014,"results":"8","hashOfConfig":"9"},{"size":267,"mtime":1611826282983,"results":"10","hashOfConfig":"9"},{"size":5017,"mtime":1611824082217,"results":"11","hashOfConfig":"9"},{"size":7354,"mtime":1611823633756,"results":"12","hashOfConfig":"9"},{"size":1235,"mtime":1611816355967,"results":"13","hashOfConfig":"9"},{"size":362,"mtime":1611728539059,"results":"14","hashOfConfig":"15"},{"size":1495,"mtime":1611827697404,"results":"16","hashOfConfig":"9"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"199geuu",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"r5ivqz",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},"/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/index.js",[],["36","37"],"/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/components/Header.jsx",[],["38","39"],"/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/components/ModalForm.jsx",["40","41"],"import React, { useEffect, useRef } from 'react';\nimport { Form, Input, InputNumber, Modal, Radio } from 'antd';\nimport { postData, formatGQLParams } from '../utils';\nimport { URL } from '../constants';\n\nconst useResetFormOnCloseModal = ({ form, visible, defaultData }) => {\n    const prevVisibleRef = useRef();\n    useEffect(() => {\n        prevVisibleRef.current = visible;\n        // 编辑回填\n        if (defaultData?._id) {\n            form.setFieldsValue(defaultData);\n        }\n    }, [visible]);\n    const prevVisible = prevVisibleRef.current;\n    useEffect(() => {\n        if (!visible && prevVisible) {\n            form.resetFields();\n        }\n    }, [visible]);\n};\n\nconst ModalForm = ({ visible, onCancel, handleUpdate, defaultData }) => {\n    const [form] = Form.useForm();\n    useResetFormOnCloseModal({\n        form,\n        visible,\n        defaultData\n    });\n\n    const onOk = () => {\n        form.submit();\n    };\n\n    const addData = (params) => {\n        return postData(URL, {\n            query: `\n                mutation {\n                    addStudent (post: {\n                       ${formatGQLParams(params)}\n                    }) {\n                        count\n                    }\n                }\n                `\n        })\n            .then(data => {\n                console.log(data)\n                onCancel();\n                handleUpdate();\n            })\n            .catch(error => console.error(error))\n    }\n\n    const editData = (params) => {\n        return postData(URL, {\n            query: `\n                mutation {\n                    editStudent (post: {\n                        ${formatGQLParams(params)}\n                    }) {\n                        count\n                    }\n                }\n                `\n        })\n            .then(data => {\n                console.log(data)\n                onCancel();\n                handleUpdate();\n            })\n            .catch(error => console.error(error))\n    }\n\n    const onFinish = (values) => {\n        console.log(values)\n        const params = {\n            ...values, age: Number(values.age)\n        }\n        if (defaultData?._id) {\n            // 编辑接口\n            editData({ ...params, _id: defaultData._id })\n        } else {\n            // 新增接口\n            addData(params)\n        }\n    };\n\n    return (\n        <Modal title=\"新增/编辑学生信息\" visible={visible} onOk={onOk} onCancel={onCancel}>\n            <Form form={form} layout=\"horizontal\" name=\"userForm\" onFinish={onFinish}>\n                <Form.Item\n                    name=\"name\"\n                    label=\"姓名\"\n                    rules={[\n                        {\n                            required: true,\n                            message: \"姓名必填\",\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    name=\"age\"\n                    label=\"年龄\"\n                    rules={[\n                        {\n                            required: true,\n                            message: \"年龄必填\",\n                        },\n                    ]}\n                >\n                    <InputNumber />\n                </Form.Item>\n                <Form.Item\n                    name=\"sex\"\n                    label=\"性别\"\n                    rules={[\n                        {\n                            required: true,\n                            message: \"性别必填\",\n                        },\n                    ]}\n                >\n                    <Radio.Group>\n                        <Radio value={'MALE'}>男</Radio>\n                        <Radio value={'FEMALE'}>女</Radio>\n                    </Radio.Group>\n                </Form.Item>\n                <Form.Item\n                    name=\"phone\"\n                    label=\"手机号\"\n                    rules={[\n                        {\n                            required: true,\n                            message: \"手机号必填\",\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    name=\"major\"\n                    label=\"专业\"\n                    rules={[\n                        {\n                            required: true,\n                            message: \"专业必填\",\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n                <Form.Item\n                    name=\"grade\"\n                    label=\"年级\"\n                    rules={[\n                        {\n                            required: true,\n                            message: \"年级必填\",\n                        },\n                    ]}\n                >\n                    <Input />\n                </Form.Item>\n            </Form>\n        </Modal>\n    );\n};\n\nexport default ModalForm;","/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/components/Content.jsx",["42","43","44","45","46"],"import React, { useState, useEffect } from 'react';\nimport { Form, Row, Col, Input, Button, Table, Space, message, InputNumber, Popconfirm } from 'antd';\nimport { SearchOutlined, PlusOutlined } from '@ant-design/icons';\nimport ModalForm from './ModalForm';\nimport { postData, getSex, formatGQLParams } from '../utils';\nimport { URL } from '../constants';\nimport './Content.css';\nimport momemt from 'moment';\nconst PAGE_SIZE = 10;\n\nconst Content = () => {\n    const [form] = Form.useForm();\n    const [visible, setVisible] = useState(false);\n    const [data, setData] = useState([]);\n    const [total, setTotal] = useState(0);\n    const [currentPage, setCurPage] = useState(1);\n    const [curRecord, setCurRecord] = useState({});\n\n    useEffect(() => {\n        queryData()\n    }, []);\n\n    // 搜索\n    const onSearch = (values) => {\n        console.log(values);\n        setCurPage(1);\n        queryData({ pageNo: 0, ...values })\n    };\n\n    // 新增/编辑完成\n    function handleUpdate() {\n        queryData()\n    }\n\n    // 查询\n    function queryData(values) {\n        const params = formatGQLParams({ pageNo: currentPage - 1, pageSize: PAGE_SIZE, ...values })\n        return postData(URL,\n            {\n                query: `query{\n                    getStudent(${params}){\n                        data{\n                            name\n                            sex\n                            age\n                            phone\n                            major\n                            grade\n                            meta {\n                                createdAt\n                                updatedAt\n                            }\n                            _id\n                        }\n                        count\n                        pageNo\n                    }\n                }`\n            }\n        )\n            .then(res => {\n                console.log('res', res)\n                const { data = [], count = 0, pageNo = 0 } = res?.data?.getStudent || {}\n                setData(data);\n                setTotal(count);\n            })\n            .catch(error => console.error(error))\n    }\n\n    // 显示弹窗\n    const showUserModal = () => {\n        setCurRecord({});\n        setVisible(true);\n    };\n\n    // 新增/编辑 弹窗\n    const hideUserModal = () => {\n        setVisible(false);\n    };\n\n    // 分页\n    const changePagination = current => {\n        console.log(current);\n        setCurPage(current);\n        queryData({ pageNo: current - 1 })\n    }\n\n    // 修改\n    const handleEdit = (record) => {\n        // 带入当前数据\n        setCurRecord(record);\n        // 显示弹窗\n        setVisible(true);\n    }\n\n    // 删除\n    const handleDelete = (id) => {\n        return postData(URL,\n            {\n                query: `mutation{\n                    deleteStudent(delete: { _id: \"${id}\"}){\n                        count\n                    }\n                }`\n            }\n        )\n            .then(res => {\n                console.log('deleteStudent', res)\n                queryData()\n            })\n            .catch(error => console.error(error))\n\n    }\n\n    const getFields = () => {\n        const children = [\n            <Col span={6} key={\"name\"}>\n                <Form.Item\n                    name={\"name\"}\n                    label={\"姓名\"}\n                >\n                    <Input />\n                </Form.Item>\n            </Col>,\n            <Col span={6} key=\"grade\">\n                <Form.Item\n                    name={\"grade\"}\n                    label={\"年级\"}\n                >\n                    <Input />\n                </Form.Item>\n            </Col>,\n            <Col span={6} key=\"major\">\n                <Form.Item\n                    name={\"major\"}\n                    label={\"专业\"}\n                >\n                    <Input />\n                </Form.Item>\n            </Col>,\n            <Col span={6} key=\"age\">\n                <Form.Item\n                    name={\"age\"}\n                    label={\"年龄\"}\n                >\n                    <InputNumber />\n                </Form.Item>\n            </Col>,\n        ];\n\n        return children;\n    };\n\n    const columns = [\n        {\n            title: 'ID',\n            dataIndex: '_id',\n            key: '_id',\n        },\n        {\n            title: '姓名',\n            dataIndex: 'name',\n            key: 'name',\n        },\n        {\n            title: '性别',\n            dataIndex: 'sex',\n            key: 'sex',\n            render: sex => getSex(sex)\n        },\n        {\n            title: '年龄',\n            dataIndex: 'age',\n            key: 'age',\n        },\n        {\n            title: '电话',\n            dataIndex: 'phone',\n            key: 'phone',\n        },\n        {\n            title: '年级',\n            dataIndex: 'grade',\n            key: 'grade',\n        },\n        {\n            title: '专业',\n            dataIndex: 'major',\n            key: 'major',\n        },\n        {\n            title: '操作时间',\n            dataIndex: 'meta',\n            key: 'meta',\n            render: (text, record) => (\n                <span>{momemt(Number(record.meta.updatedAt)).format('YYYY-MM-DD HH:mm:ss')}</span>\n            ),\n        },\n        {\n            title: '操作',\n            dataIndex: 'edit',\n            key: 'edit',\n            render: (text, record) => (\n                <Space size=\"middle\">\n                    <a onClick={() => handleEdit(record)}>修改</a>\n                    <Popconfirm\n                        title=\"是否确定删除?\"\n                        onConfirm={() => handleDelete(record._id)}\n                        okText=\"是的\"\n                        cancelText=\"取消\"\n                    ><a>删除</a>\n                    </Popconfirm>\n                </Space>\n            ),\n        },\n    ];\n\n    return <>\n        <Form\n            form={form}\n            name=\"advanced_search\"\n            className=\"ant-advanced-search-form\"\n            onFinish={onSearch}\n        >\n            <Row gutter={24}>{getFields()}</Row>\n            <Row>\n                <Col span={24} style={{ textAlign: 'right' }}>\n                    <Button type=\"primary\" htmlType=\"submit\" icon={<SearchOutlined />}>\n                        Search\n        </Button>\n                    <Button\n                        style={{ margin: '0 8px' }}\n                        onClick={() => {\n                            form.resetFields();\n                            setCurPage(1);\n                            queryData();\n                        }}\n                    >\n                        Reset\n        </Button>\n                    <Button type=\"primary\" onClick={showUserModal} icon={<PlusOutlined />}>Add</Button>\n\n                </Col>\n            </Row>\n        </Form>\n        <ModalForm visible={visible} onCancel={hideUserModal} handleUpdate={handleUpdate} defaultData={curRecord} />\n        <Table className=\"table\" dataSource={data} columns={columns}\n            rowKey={record => record._id}\n            pagination={\n                {\n                    onChange: current => changePagination(current),\n                    total,\n                    current: currentPage,\n                    showTotal: (total) => `Total ${total}`,\n                }\n            } />;\n    </>\n\n}\n\nexport default Content;","/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/utils.js",[],"/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/reportWebVitals.js",[],"/Users/tangting/tt/github/GraphQL-Koa-Mongodb/view/src/App.js",["47"],"import React, { useState } from \"react\";\nimport { Switch } from \"antd\";\n\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport \"./App.css\";\nimport { URL } from \"./constants\";\n\nfunction App() {\n  const [mode, setMode] = useState(true);\n\n  function changeTheme(checked) {\n    const dom = document.getElementById(\"theme\");\n    if (dom) {\n      if (!checked) {\n        dom.remove();\n      }\n    } else {\n      const style = document.createElement(\"style\");\n      style.id = \"theme\";\n      style.innerText =\n        \"html{background:black;filter:invert(1) hue-rotate(180deg);} iframe{filter:invert(1) hue-rotate(180deg);} \";\n      if (checked) {\n        document.body.append(style);\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className=\"setting\">\n        <Switch\n          checkedChildren=\"普通模式\"\n          unCheckedChildren=\"graphql\"\n          defaultChecked\n          onChange={(checked) => setMode(checked)}\n        />\n        <Switch\n          checkedChildren=\"🌜\"\n          unCheckedChildren=\"🌞\"\n          onChange={changeTheme}\n        />\n      </div>\n      {mode ? (\n        <Content />\n      ) : (\n        <>\n          <p>\n            ps:由于GraphiQL组件依赖的react\n            16版本（我想用17的新特性），所以就没用GraphiQL，直接嵌入iframe\n          </p>\n          <iframe src={URL} className=\"iframe-wrap\" />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"48","replacedBy":"52"},{"ruleId":"50","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":14,"column":8,"nodeType":"56","endLine":14,"endColumn":17,"suggestions":"57"},{"ruleId":"54","severity":1,"message":"58","line":20,"column":8,"nodeType":"56","endLine":20,"endColumn":17,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":2,"column":55,"nodeType":"62","messageId":"63","endLine":2,"endColumn":62},{"ruleId":"54","severity":1,"message":"64","line":21,"column":8,"nodeType":"56","endLine":21,"endColumn":10,"suggestions":"65"},{"ruleId":"60","severity":1,"message":"66","line":63,"column":47,"nodeType":"62","messageId":"63","endLine":63,"endColumn":53},{"ruleId":"67","severity":1,"message":"68","line":205,"column":21,"nodeType":"69","endLine":205,"endColumn":59},{"ruleId":"67","severity":1,"message":"68","line":211,"column":22,"nodeType":"69","endLine":211,"endColumn":25},{"ruleId":"70","severity":1,"message":"71","line":53,"column":11,"nodeType":"69","endLine":53,"endColumn":55},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],["72"],["73"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'defaultData' and 'form'. Either include them or remove the dependency array.","ArrayExpression",["74"],"React Hook useEffect has missing dependencies: 'form' and 'prevVisible'. Either include them or remove the dependency array.",["75"],"no-unused-vars","'message' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'queryData'. Either include it or remove the dependency array.",["76"],"'pageNo' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},"Update the dependencies array to be: [defaultData, form, visible]",{"range":"83","text":"84"},"Update the dependencies array to be: [form, prevVisible, visible]",{"range":"85","text":"86"},"Update the dependencies array to be: [queryData]",{"range":"87","text":"88"},[487,496],"[defaultData, form, visible]",[657,666],"[form, prevVisible, visible]",[779,781],"[queryData]"]